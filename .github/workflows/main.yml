name: ci
on: pull_request
jobs:

#  lint:
#    name: lint
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-python@v1
#        with:
#          python-version: '3.7'
#      - name: extract pip cache
#        uses: actions/cache@v2
#        with:
#          path: ~/.cache/pip
#          key: ${{ runner.os }}-pip-${{ hashFiles('setup.py') }}
#          restore-keys: ${{ runner.os }}-pip-
#      - run: |
#          pip install --user --upgrade pip wheel
#          pip install -e .[torrent,lint]
#      - run: make lint

#  tests-unit:
#    name: "tests / unit"
#    strategy:
#      matrix:
#        os:
#          - ubuntu-latest
#            #- macos-latest
#            #- windows-latest
#    runs-on: ${{ matrix.os }}
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-python@v1
#        with:
#          python-version: '3.7'
#      - name: set pip cache dir
#        id: pip-cache
#        run: echo "::set-output name=dir::$(pip cache dir)"
#      - name: extract pip cache
#        uses: actions/cache@v2
#        with:
#          path: ${{ steps.pip-cache.outputs.dir }}
#          key: ${{ runner.os }}-pip-${{ hashFiles('setup.py') }}
#          restore-keys: ${{ runner.os }}-pip-
#      - run: |
#          pip install --user --upgrade pip wheel
#          pip install -e .[torrent,test]
#      - env:
#          HOME: /tmp
#        run: make test-unit-coverage

#  tests-integration:
#    name: "tests / integration"
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        test:
#          - datanetwork
#          - blockchain
#          - other
#    steps:
#      - name: Configure sysctl limits
#        run: |
#                sudo swapoff -a
#                sudo sysctl -w vm.swappiness=1
#                sudo sysctl -w fs.file-max=262144
#                sudo sysctl -w vm.max_map_count=262144
#
#      - name: Runs Elasticsearch
#        uses: elastic/elastic-github-actions/elasticsearch@master
#        with:
#                stack-version: 7.6.0
#      - uses: actions/checkout@v2
#      - uses: actions/setup-python@v1
#        with:
#          python-version: '3.7'
#      - if: matrix.test == 'other'
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y --no-install-recommends ffmpeg
#      - name: extract pip cache
#        uses: actions/cache@v2
#        with:
#          path: ./.tox
#          key: tox-integration-${{ matrix.test }}-${{ hashFiles('setup.py') }}
#          restore-keys: txo-integration-${{ matrix.test }}-
#      - run: pip install tox-travis
#      - run: tox -e ${{ matrix.test }}

  build:
    #needs: ["lint", "tests-unit", "tests-integration"]
    name: "build"
    strategy:
      matrix:
        os:
          - ubuntu-16.04
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: '3.7'
      - id: os-name
        uses: ASzc/change-string-case-action@v1
        with:
          string: ${{ runner.os }}
      - name: set pip cache dir
        id: pip-cache
        run: echo "::set-output name=dir::$(pip cache dir)"
      - name: extract pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('setup.py') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Setup
        run: |
          pip install --user --upgrade pip wheel
          pip install pyinstaller
          # https://stackoverflow.com/a/61693590
          # https://github.com/pypa/setuptools/issues/1963
          pip install --upgrade 'setuptools<45.0.0'
      - if: startsWith(runner.os, 'linux')
        name: Build & Run (Linux)
        run: |
          pip install -e .
      - if: startsWith(runner.os, 'mac')
        name: Build & Run (Mac)
        run: |
          pip install -e .
      - if: startsWith(runner.os, 'linux') || startsWith(runner.os, 'mac')
        name: Build & Run (Unix)
        run: |
          #python docker/set_build.py
          pyinstaller --onefile --name lbrynet lbry/extras/cli.py
          dist/lbrynet --version
      - if: startsWith(runner.os, 'windows')
        name: Build & Run (Windows)
        run: |
          pip install pywin32
          pip install -e .
          #python docker/set_build.py
          pyinstaller --additional-hooks-dir=scripts/. --icon=icons/lbry256.ico --onefile --name lbrynet lbry/extras/cli.py
          dist/lbrynet.exe --version
      - uses: actions/upload-artifact@v2
        with:
          name: lbrynet-${{ steps.os-name.outputs.lowercase }}
          path: dist/

  release:
    needs: ["build"]
    name: "release"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/download-artifact@v2
      - run: |
          chmod +x lbrynet-macos/lbrynet
          chmod +x lbrynet-linux/lbrynet
          zip --junk-paths lbrynet-mac.zip lbrynet-macos/lbrynet
          zip --junk-paths lbrynet-linux.zip lbrynet-linux/lbrynet
          zip --junk-paths lbrynet-windows.zip lbrynet-windows/lbrynet.exe
          ls -lh
      - name: Release
        uses: softprops/action-gh-release@v1
        #if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: vTestFoo
          draft: true
          files: |
            lbrynet-mac.zip
            lbrynet-linux.zip
            lbrynet-windows.zip
#      - run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
#      - env:
#          GITHUB_TOKEN: ${{ github.token }}
#
#        run: |
#          pip install githubrelease
#          githubrelease --no-progress asset lbryio/lbry-sdk upload ${CI_COMMIT_TAG} lbrynet-${OS}.zip
          # githubrelease --no-progress release lbryio/lbry-sdk publish ${CI_COMMIT_TAG}

#  docker:
#    needs: ["build"]
#    name: "build (docker)"
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v1
#      - name: fetch lbrynet binary
#        uses: actions/download-artifact@v2
#        with:
#          name: lbrynet-linux-latest
#      - run: |
#          chmod +x lbrynet
#          mv lbrynet docker
#      - name: build and push docker image
#        uses: docker/build-push-action@v1
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#          repository: lbry/lbrynet
#          path: docker
#          dockerfile: docker/Dockerfile.wallet_server
#          tag_with_ref: true
#          tag_with_sha: true
#          add_git_labels: true
